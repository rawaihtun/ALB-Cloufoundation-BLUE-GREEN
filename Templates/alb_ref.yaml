AWSTemplateFormatVersion: "2010-09-09"
Description: "Create ALB, ALB security group, target groups, listeners and listener rules"
Parameters:
    vpcSecurityGroupStackName: #ParameterKey
        Description: 'Name of your vpc Security Group CFN Stack'
        Type: String
        Default: sgvpc-securitygroup

    vpcStackName: #ParameterKey
        Description: 'Name of your vpc CFN Stack'
        Type: String
        Default: 'sgpvpc'
        AllowedValues:
        - sgpvpc
        - sydvpc
        - tkovpc
Resources:            
    ApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "Application-Load-Balancer"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !ImportValue 
                  Fn::Sub: ${vpcStackName}-publicSubnet1ID
              - !ImportValue 
                  Fn::Sub: ${vpcStackName}-publicSubnet2ID
              - !ImportValue 
                  Fn::Sub: ${vpcStackName}-publicSubnet3ID
            SecurityGroups:
              - !ImportValue
                  Fn::Sub: ${vpcSecurityGroupStackName}-vpcSecurityGroupID
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
    HTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref Test1TargetGroup
            # DefaultActions: 
            #   - 
            #     Order: 1
            #     RedirectConfig: 
            #         Protocol: "HTTPS"
            #         Port: "443"
            #         Host: "#{host}"
            #         Path: "/#{path}"
            #         Query: "#{query}"
            #         StatusCode: "HTTP_301"
            #     Type: "redirect"
                
    Test1TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            # VpcId: !Ref VPC
            VpcId:
              Fn::ImportValue:
                !Sub ${vpcStackName}-VPCID            
            Name: "target-group-1"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    # Test2TargetGroup:
    #     Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    #     Properties:
    #         HealthCheckIntervalSeconds: 30
    #         HealthCheckPath: "/"
    #         Port: 80
    #         Protocol: "HTTP"
    #         HealthCheckPort: "traffic-port"
    #         HealthCheckProtocol: "HTTP"
    #         HealthCheckTimeoutSeconds: 5
    #         UnhealthyThresholdCount: 2
    #         TargetType: "instance"
    #         Matcher: 
    #             HttpCode: "200"
    #         HealthyThresholdCount: 5
    #         VpcId: !Ref VPC
    #         Name: "target-group-2"
    #         HealthCheckEnabled: true
    #         TargetGroupAttributes: 
    #           - 
    #             Key: "stickiness.enabled"
    #             Value: "false"
    #           - 
    #             Key: "deregistration_delay.timeout_seconds"
    #             Value: "300"
    #           - 
    #             Key: "stickiness.type"
    #             Value: "lb_cookie"
    #           - 
    #             Key: "stickiness.lb_cookie.duration_seconds"
    #             Value: "86400"
    #           - 
    #             Key: "slow_start.duration_seconds"
    #             Value: "0"
    #           - 
    #             Key: "load_balancing.algorithm.type"
    #             Value: "round_robin"
               

Outputs:        
    ALB:
        Description: The created loadbalancer
        Value: !Ref ApplicationLoadBalancer

    TargetGroup1:
        Description: The created TargetGroup 1
        Value: !Ref Test1TargetGroup

    # TargetGroup2:
    #     Description: The created TargetGroup 2
    #     Value: !Ref Test2TargetGroup

    # LoadBalancerSecurityGroup:
    #     Description: the securty group for the ALB
    #     Value: !Ref ALBSecurityGroup